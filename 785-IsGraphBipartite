# Last updated: 25/06/2025, 15:13:56
class Solution:
    def isBipartite(self, graph: List[List[int]]) -> bool:
        map = {}
        visited = set()
        q = deque()

        def dfs(node, edges, colour):
            if node in map and map[node] != colour: 
                return False
            else: 
                map[node] = colour
            
            visited.add(node)
            child_colour = 'blue' if colour == 'red' else 'red'

            for child in edges: 
                if child in visited: 
                    if map[child] != child_colour:
                        return False
                else:
                    if not dfs(child, graph[child], child_colour):
                        return False

            return True

        for i, node in enumerate(graph):
            if i in visited: 
                continue

            if not dfs(i,node, 'red'):
                return False


        return True


